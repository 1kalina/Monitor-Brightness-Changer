#!/usr/bin/env python3

import argparse
import subprocess

def get_monitor_ids():
    """Get connected monitor IDs using ddcutil."""
    try:
        result = subprocess.run(
            ["sudo", "ddcutil", "detect"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        monitors = []
        for line in result.stdout.split("\n"):
            if line.startswith("Display "):
                monitors.append(int(line.split()[1]))
        return monitors
    except Exception as e:
        print(f"Error detecting monitors: {e}")
        return []

def set_brightness(monitor_id, brightness):
    """Set the brightness of a specific monitor."""
    try:
        subprocess.run(
            ["sudo", "ddcutil", "-d", str(monitor_id), "setvcp", "10", str(brightness)],
            check=True
        )
        print(f"Brightness of monitor {monitor_id} set to {brightness}.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to set brightness for monitor {monitor_id}: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

def main():
    parser = argparse.ArgumentParser(description="Set monitor brightness using ddcutil.")
    parser.add_argument("-b", "--brightness", type=int, required=True, help="Brightness level (0-100)")
    parser.add_argument("-m", "--monitor", type=int, help="Monitor ID (optional, applies to all if not specified)")

    args = parser.parse_args()

    if not (0 <= args.brightness <= 100):
        print("Error: Brightness must be between 0 and 100.")
        return

    monitors = get_monitor_ids()
    if not monitors:
        print("No monitors detected or DDC/CI not enabled.")
        return

    if args.monitor is not None:
        if args.monitor in monitors:
            set_brightness(args.monitor, args.brightness)
        else:
            print(f"Error: Monitor ID {args.monitor} not detected.")
    else:
        for monitor_id in monitors:
            set_brightness(monitor_id, args.brightness)

if __name__ == "__main__":
    main()

